generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(cuid())
  login      String   @unique
  email      String?  @unique
  idExternal String?  @unique @map("id_external")
  nicename   String
  password   String
  type       String   @default("User")
  status     String   @default("Active")
  language   String   @default("en")
  wallet     String   @default("0x")
  metas      Json?    @default("{}")
  created    DateTime @default(now()) @map("created")
  modified   DateTime @default(now()) @map("modified")

  userBalance            UserBalance?
  messages               Message[]
  chats                  Chat[]
  modelUsages            ModelUsage[]
  images                 Image[]
  stakingAnalytics       StakingUserAnalytics? @relation(fields: [stakingUserAnalyticsId], references: [id])
  web3Analytics          Web3UserAnalytics?    @relation(fields: [web3UserAnalyticsId], references: [id])
  stakingUserAnalyticsId Int?
  web3UserAnalyticsId    Int?

  @@map("user")
}

model Chat {
  id          Int      @id @default(autoincrement())
  uid         String   @unique @default(cuid())
  name        String   @default("New Chat")
  description String?  @db.Text
  idUser      Int      @map("id_user")
  idModel     Int?     @map("id_model") // Nuevo campo para el ID del modelo seleccionado
  system      String   @db.LongText
  status      String   @default("active")
  created     DateTime @default(now()) @map("created")
  modified    DateTime @default(now()) @map("modified")
  metas       Json?    @default("{}")

  user          User         @relation(fields: [idUser], references: [id])
  messages      Message[]    @relation("ChatMessages")
  modelUsages   ModelUsage[] @relation("ChatModelUsages")
  selectedModel AIModel?     @relation(fields: [idModel], references: [id]) // Relaci√≥n con el modelo seleccionado

  @@map("chat")
}

model Message {
  id         Int      @id @default(autoincrement())
  uid        String?  @unique @default(cuid())
  idChat     Int      @map("id_chat")
  idUser     Int      @map("id_user")
  content    String   @db.LongText
  reasoning  String?  @db.Text
  type       String   @default("user") @map("message_type")
  idRequest  String?  @unique @default(cuid()) @map("id_request")
  responseTo Int?     @map("response_to")
  created    DateTime @default(now()) @map("created")
  modified   DateTime @default(now()) @map("modified")

  chat          Chat         @relation("ChatMessages", fields: [idChat], references: [id], onDelete: Cascade)
  responses     Message[]    @relation("responses")
  parentMessage Message?     @relation("responses", fields: [responseTo], references: [id])
  user          User         @relation(fields: [idUser], references: [id])
  modelUsages   ModelUsage[]

  @@map("message")
}

model ModelUsage {
  id               Int      @id @default(autoincrement())
  idUser           Int      @map("id_user")
  idModel          Int      @map("id_model")
  idChat           Int      @map("id_chat")
  idMessage        Int      @map("id_message")
  tokensUsed       Int      @map("tokens_used")
  promptTokens     Int      @default(0) @map("prompt_tokens")
  completionTokens Int      @default(0) @map("completion_tokens")
  promptCost       Decimal  @default(0) @map("prompt_cost") @db.Decimal(10, 8)
  completionCost   Decimal  @default(0) @map("completion_cost") @db.Decimal(10, 8)
  cost             Decimal  @db.Decimal(10, 8)
  balanceBefore    Decimal  @default(0) @map("balance_before") @db.Decimal(10, 8)
  created          DateTime @default(now())

  user    User    @relation(fields: [idUser], references: [id])
  aiModel AIModel @relation(fields: [idModel], references: [id])
  chat    Chat    @relation("ChatModelUsages", fields: [idChat], references: [id], onDelete: Cascade)
  message Message @relation(fields: [idMessage], references: [id])

  @@map("model_usage")
}

model Attachment {
  id         Int      @id @default(autoincrement())
  slug       String   @unique
  name       String   @default("")
  attachment String   @default("")
  mime       String   @default("")
  size       Int      @default(0)
  source     String   @default("")
  acl        String   @default("")
  metas      Json?    @default("{}")
  created    DateTime @default(now()) @map("created")
  modified   DateTime @default(now()) @map("modified")

  @@map("attachment")
}

model AIModel {
  id                   Int      @id @default(autoincrement())
  name                 String
  description          String?  @db.Text
  inputCost            Decimal  @map("input_cost") @db.Decimal(10, 8)
  outputCost           Decimal  @map("output_cost") @db.Decimal(10, 8)
  maxOutput            Int      @map("max_output")
  latency              Decimal  @db.Decimal(5, 2)
  throughput           Decimal  @db.Decimal(10, 2)
  status               String   @default("active")
  created              DateTime @default(now())
  modified             DateTime @default(now()) @updatedAt
  sandbox              Boolean  @default(false)
  // Campos de OpenRouter
  openrouterId         String?  @unique @map("openrouter_id")
  openrouterInputCost  Decimal  @default(0) @map("openrouter_input_cost") @db.Decimal(10, 8)
  openrouterOutputCost Decimal  @default(0) @map("openrouter_output_cost") @db.Decimal(10, 8)
  contextLength        Int?     @map("context_length")
  modelType            String?  @map("model_type")
  modelArchitecture    Json?    @map("model_architecture")
  // Nuevo campo para visibilidad en frontend
  isVisible            Boolean  @default(true) @map("is_visible")
  priority             Int      @default(0) // Para ordenar modelos en el frontend
  isFeatured           Boolean  @default(false) @map("is_featured")

  modelUsages ModelUsage[]
  Chat        Chat[]

  @@map("ai_model")
}

model BalanceTransaction {
  id            Int         @id @default(autoincrement())
  idUserBalance Int         @map("id_user_balance")
  idPayment     String?     @map("id_payment") @db.Text
  amount        Decimal     @db.Decimal(10, 8)
  currency      String
  type          String
  description   String?     @db.Text
  created       DateTime    @default(now())
  timestamp     BigInt
  txHash        String?     @db.Text
  userBalance   UserBalance @relation(fields: [idUserBalance], references: [id])

  @@map("balance_transaction")
}

model UserBalance {
  id           Int                  @id @default(autoincrement())
  idUser       Int                  @unique @map("id_user")
  balance      Decimal              @db.Decimal(10, 8)
  created      DateTime             @default(now())
  modified     DateTime             @default(now()) @updatedAt
  user         User                 @relation(fields: [idUser], references: [id])
  transactions BalanceTransaction[]

  @@map("user_balance")
}

model WaitList {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  created  DateTime @default(now())
  modified DateTime @default(now())

  @@map("wait_list")
}

model Image {
  id       Int      @id @default(autoincrement())
  idUser   Int      @map("id_user")
  prompt   String   @default("")
  url      String   @default("")
  metas    Json?    @default("{}")
  created  DateTime @default(now())
  modified DateTime @default(now())

  user User @relation(fields: [idUser], references: [id])

  @@map("image")
}

model Web3Analytics {
  id              Int      @id @default(autoincrement())
  totalUsers      Int      @default(0) @map("total_users")
  totalAvaxVolume Decimal  @map("total_avax_volume") @db.Decimal(20, 8)
  totalUsdtVolume Decimal  @map("total_usdt_volume") @db.Decimal(20, 8)
  timestamp       DateTime @default(now())

  @@map("web3_analytics")
}

model Web3UserAnalytics {
  id            Int      @id @default(autoincrement())
  walletAddress String   @unique @map("wallet_address")
  totalPayments Int      @default(0) @map("total_payments")
  avaxVolume    Decimal  @map("avax_volume") @db.Decimal(20, 8)
  usdtVolume    Decimal  @map("usdt_volume") @db.Decimal(20, 8)
  firstPayment  DateTime @map("first_payment")
  lastPayment   DateTime @map("last_payment")
  User          User[]

  @@map("web3_user_analytics")
}

model Web3Transaction {
  id              Int      @id @default(autoincrement())
  walletAddress   String   @map("wallet_address")
  transactionHash String   @unique @map("transaction_hash")
  avaxAmount      Decimal  @map("avax_amount") @db.Decimal(20, 8)
  usdtAmount      Decimal  @map("usdt_amount") @db.Decimal(20, 8)
  timestamp       DateTime @default(now()) @map("timestamp")
  blockNumber     BigInt   @map("block_number")

  @@map("web3_transaction")
}

// === MODELOS PARA STAKING ===
model StakingAnalytics {
  id                   Int      @id @default(autoincrement())
  totalStakers         Int      @default(0) @map("total_stakers")
  totalStaked          Decimal  @map("total_staked") @db.Decimal(20, 8)
  totalRewardsPaid     Decimal  @map("total_rewards_paid") @db.Decimal(20, 8)
  averageStakeDuration Int      @default(0) @map("average_stake_duration")
  currentAPR           Decimal  @map("current_apr") @db.Decimal(10, 8)
  timestamp            DateTime @default(now())

  @@map("staking_analytics")
}

model StakingUserAnalytics {
  id                   Int       @id @default(autoincrement())
  walletAddress        String    @unique @map("wallet_address")
  totalStakes          Int       @default(0) @map("total_stakes")
  activeStakes         Int       @default(0) @map("active_stakes")
  totalStaked          Decimal   @map("total_staked") @db.Decimal(20, 8)
  currentlyStaked      Decimal   @map("currently_staked") @db.Decimal(20, 8)
  totalRewardsEarned   Decimal   @map("total_rewards_earned") @db.Decimal(20, 8)
  averageStakeDuration Int       @default(0) @map("average_stake_duration")
  firstStake           DateTime? @map("first_stake")
  lastStake            DateTime? @map("last_stake")
  User                 User[]

  @@map("staking_user_analytics")
}

model StakingTransaction {
  id              Int      @id @default(autoincrement())
  walletAddress   String   @map("wallet_address")
  transactionHash String   @unique @map("transaction_hash")
  type            String // 'stake' or 'unstake' or 'emergency_withdraw'
  amount          Decimal  @db.Decimal(20, 8)
  rewardAmount    Decimal? @map("reward_amount") @db.Decimal(20, 8)
  duration        Int? // en d√≠as
  apr             Decimal? @db.Decimal(10, 8)
  timestamp       DateTime @default(now())
  blockNumber     BigInt   @map("block_number")

  @@map("staking_transaction")
}

model StakingSnapshot {
  id               Int      @id @default(autoincrement())
  timestamp        DateTime @default(now())
  totalStaked      Decimal  @map("total_staked") @db.Decimal(20, 8)
  totalStakers     Int      @default(0) @map("total_stakers")
  monthlyAPR       Decimal  @map("monthly_apr") @db.Decimal(10, 8)
  annualAPR        Decimal  @map("annual_apr") @db.Decimal(10, 8)
  tvl              Decimal  @db.Decimal(20, 8)
  availableRewards Decimal  @map("available_rewards") @db.Decimal(20, 8)

  @@map("staking_snapshot")
}

model CombinedUserMetrics {
  id                Int      @id @default(autoincrement())
  walletAddress     String   @unique @map("wallet_address")
  totalValueLocked  Decimal  @map("total_value_locked") @db.Decimal(20, 8)
  stakingBalance    Decimal  @map("staking_balance") @db.Decimal(20, 8)
  totalRewards      Decimal  @map("total_rewards") @db.Decimal(20, 8)
  totalTransactions Int      @default(0) @map("total_transactions")
  lastActivity      DateTime @default(now()) @map("last_activity")
  riskScore         Int      @default(0) @map("risk_score")
  userTier          String   @default("BASIC")

  @@map("combined_user_metrics")
}

model DatabaseSnapshot {
  id                Int      @id @default(autoincrement())
  timestamp         DateTime @default(now())
  totalUsers        Int      @default(0)
  activeUsers       Int      @default(0)
  usersWithWallet   Int      @default(0)
  totalTransactions Int      @default(0)
  totalAvaxVolume   Decimal  @db.Decimal(20, 8)
  totalUsdtVolume   Decimal  @db.Decimal(20, 8)
  totalCost         Decimal  @db.Decimal(20, 8)
  userSnapshots     Json?

  @@map("database_snapshot")
}
